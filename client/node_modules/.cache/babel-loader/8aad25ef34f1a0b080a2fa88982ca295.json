{"ast":null,"code":"var _jsxFileName = \"/var/www/html/devis_sayse/src/views/NotFound.js\";\nimport React, { Component } from 'react';\nimport FinalForm from './test_input';\nimport Client from '../components/Devis/inputClient';\nimport DetailClient from '../components/Devis/DetailClient';\nimport { Form, Icon, Button, Input, notification, DatePicker } from 'antd';\nlet id = 0;\nvar type = '';\nvar title = '';\nvar message = '';\n\nconst openNotificationWithIcon = type => {\n  notification[type]({\n    message: title,\n    description: message,\n    durarion: null\n  });\n};\n\nclass NotFound extends Component {\n  constructor() {\n    super();\n\n    this.add = () => {\n      const form = this.props.form; // can use data-binding to get\n\n      const keys = form.getFieldValue('keys');\n      const nextKeys = keys.concat(id++); // can use data-binding to set\n      // important! notify form to detect changes\n\n      form.setFieldsValue({\n        keys: nextKeys\n      });\n    };\n\n    this.state = {\n      res: [],\n      client: [],\n      nameSite: ''\n    };\n  }\n\n  componentDidMount() {}\n\n  getData(e) {\n    this.setState({\n      client: [...this.state.client, e]\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  getDataForPdf(e) {\n    var obj = {};\n    obj.site = e.service;\n    this.setState({\n      res: [...this.state.res, obj.site]\n    });\n  }\n\n  final() {\n    console.log(this.state.res);\n    console.log(this.state.client);\n  }\n\n  render() {\n    var title = '';\n    var message = '';\n    const _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldValue = _this$props$form.getFieldValue;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 4\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 20\n        }\n      }\n    };\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 20,\n          offset: 4\n        }\n      }\n    };\n    getFieldDecorator('keys', {\n      initialValue: []\n    });\n    const keys = getFieldValue('keys');\n    const formItems = keys.map((k, index) => React.createElement(\"div\", {\n      key: k,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      className: \"row\",\n      style: {\n        marginTop: '1%'\n      } // {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n      // label={index === 0 ? '' : ''}\n      ,\n      required: false,\n      key: k,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"p\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Formulaire n\\xB0 \", k + 1), React.createElement(FinalForm, {\n      getDataForPdf: this.getDataForPdf.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }))))));\n\n    if (this.state.res.length !== 0 && this.state.client.length !== 0) {\n      type = 'success';\n      title = \"Super !\";\n      message = \"Votre devis est prêt !\";\n      this.final();\n    } else {\n      type = 'danger';\n      title = \"Oups ...\";\n      message = \"Vous devez remplir toute les informations sur la page avant de convertir les données en PDF..\";\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Client, {\n      getData: this.getData.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, formItems), React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"dashed\",\n      className: \"btn_add\",\n      onClick: this.add,\n      style: {\n        width: '20%',\n        marginBottom: '2vh',\n        marginTop: '2vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Ajouter un nouveau site\"))), React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onClick: () => openNotificationWithIcon(type),\n      className: \"btn btn-light btn-test\",\n      type: \"submit\",\n      value: \"Convertir en PDF\",\n      style: {\n        marginTop: '5%',\n        marginBottom: '5%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst WrappedDynamicFieldSet = Form.create({\n  name: 'dynamic_form_item'\n})(NotFound);\nexport default WrappedDynamicFieldSet;","map":{"version":3,"sources":["/var/www/html/devis_sayse/src/views/NotFound.js"],"names":["React","Component","FinalForm","Client","DetailClient","Form","Icon","Button","Input","notification","DatePicker","id","type","title","message","openNotificationWithIcon","description","durarion","NotFound","constructor","add","form","props","keys","getFieldValue","nextKeys","concat","setFieldsValue","state","res","client","nameSite","componentDidMount","getData","e","setState","handleSubmit","event","preventDefault","getDataForPdf","obj","site","service","final","console","log","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","initialValue","formItems","map","k","index","marginTop","bind","length","width","marginBottom","WrappedDynamicFieldSet","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FinalForm from './test_input';\nimport Client from '../components/Devis/inputClient';\nimport DetailClient from '../components/Devis/DetailClient';\nimport { Form, Icon, Button, Input, notification, DatePicker } from 'antd';\n\n\n\n\nlet id = 0;\n\nvar type = ''\nvar title = ''\nvar message = ''\n\nconst openNotificationWithIcon = (type) => {\n\n    notification[type]({\n        message: title,\n        description: message,\n        durarion: null,\n    });\n};\n\nclass NotFound extends Component {\n    constructor() {\n        super();\n        this.state = {\n            res: [],\n            client: [],\n            nameSite: '',\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    add = () => {\n        const { form } = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(id++);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    };\n\n\n\n    getData(e) {\n        this.setState({ client: [... this.state.client, e] })\n    }\n\n\n    handleSubmit(event) {\n\n\n\n        event.preventDefault();\n    }\n\n    getDataForPdf(e) {\n        var obj = {};\n\n        obj.site = e.service;\n\n        this.setState({ res: [... this.state.res, obj.site] })\n    }\n\n\n\n    final(){\n        console.log(this.state.res);\n        console.log(this.state.client);\n    }\n\n\n\n    render() {\n        var title = ''\n        var message = ''\n\n        const { getFieldDecorator, getFieldValue } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 4 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 20 },\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            wrapperCol: {\n                xs: { span: 24, offset: 0 },\n                sm: { span: 20, offset: 4 },\n            },\n        };\n\n\n        getFieldDecorator('keys', { initialValue: [] });\n        const keys = getFieldValue('keys');\n        const formItems = keys.map((k, index) => (\n            <div key={k}>\n                <Form.Item className=\"row\" style={{ marginTop: '1%' }}\n                    // {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    // label={index === 0 ? '' : ''}\n                    required={false}\n                    key={k}\n                >\n                    {/* {getFieldDecorator(`names[${k}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [\n                            {\n                                required: true,\n                                whitespace: true,\n                                message: \"Veuillez remplir tout les champs avant de pouvoir créer le devis\",\n                            },\n                        ],\n                    })\n                        ( */}\n                    <div>\n                        <hr></hr>\n                        <div className=\"row\">\n                            <label className=\"p\">Formulaire n° {k + 1}</label>\n                            <FinalForm getDataForPdf={this.getDataForPdf.bind(this)} />\n                        </div>\n                    </div>\n                    {/* )} */}\n                    {/* {keys.length > 1 ? (\n                        <div className=\"text-center\">\n                            <p className=\"p delete\">Supprimer le service n° {k + 1} &nbsp;\n                  <Icon\n                      className=\"dynamic-delete-button\"\n                      type=\"minus-circle-o\"\n                      onClick={() => this.remove(k)}\n                    />\n                  </p>\n                        </div>\n                    ) : null} */}\n                </Form.Item>\n            </div>\n\n        ));\n\n\n\n        if (this.state.res.length !== 0 && this.state.client.length !== 0) {\n             type = 'success'\n             title = \"Super !\"\n             message = \"Votre devis est prêt !\"\n\n            this.final();\n        }\n        else {\n             type = 'danger'\n             title = \"Oups ...\"\n             message = \"Vous devez remplir toute les informations sur la page avant de convertir les données en PDF..\"\n        }\n\n\n\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                    <Client getData={this.getData.bind(this)} />\n                    {/* <FinalForm getDataForPdf={this.getDataForPdf.bind(this)} /> */}\n\n                    <div className=\"\">\n                        <div className=\"\">\n                            {formItems}\n                            {/* <button onClick={this.getKey.bind(this)}>getKey</button> */}\n                        </div>\n                        <div className=\"text-center\">\n                            <Button type=\"dashed\" className=\"btn_add\" onClick={this.add} style={{ width: '20%', marginBottom: '2vh', marginTop: '2vh' }}>\n                                {/* <Icon type=\"plus\" /> */}\n                                Ajouter un nouveau site\n                        </Button>\n                        </div>\n                    </div>\n                    <div className=\"text-center\">\n                        <input onClick={() => openNotificationWithIcon(type)} className=\"btn btn-light btn-test\" type=\"submit\" value=\"Convertir en PDF\" style={{ marginTop: '5%', marginBottom: '5%' }} />\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\nconst WrappedDynamicFieldSet = Form.create({ name: 'dynamic_form_item' })(NotFound);\nexport default WrappedDynamicFieldSet;"]},"metadata":{},"sourceType":"module"}