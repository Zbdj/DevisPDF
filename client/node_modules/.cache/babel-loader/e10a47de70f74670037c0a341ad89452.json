{"ast":null,"code":"var _jsxFileName = \"/var/www/html/devis_sayse/src/views/test.js\";\nimport React from 'react'; // Import the Autocomplete Component\n\nimport Autocomplete from 'react-autocomplete';\nexport default class App extends React.Component {\n  constructor(props, context) {\n    super(props, context); // Set initial State\n\n    this.state = {\n      // Current value of the select field\n      value: \"\",\n      // Data that will be rendered in the autocomplete\n      autocompleteData: [{\n        label: 'Apple',\n        value: 1\n      }, {\n        label: 'Microsoft',\n        value: 2\n      }, {\n        label: 'Me, Myself and I',\n        value: 3\n      }, {\n        label: 'Me, Myself and I',\n        value: 3\n      }, {\n        label: 'Me, Myself and I',\n        value: 3\n      }, {\n        label: 'Me, Myself and I',\n        value: 3\n      }, {\n        label: 'Me, Myself and I',\n        value: 3\n      }]\n    }; // Bind `this` context to functions of the class\n\n    this.onChange = this.onChange.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.getItemValue = this.getItemValue.bind(this);\n    this.renderItem = this.renderItem.bind(this);\n  }\n  /**\n   * Callback triggered when the user types in the autocomplete field\n   * \n   * @param {Event} e JavaScript Event\n   * @return {Event} Event of JavaScript can be used as usual.\n   */\n\n\n  onChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n    console.log(\"The Input Text has changed to \", e.target.value);\n  }\n  /**\n   * Callback triggered when the autocomplete input changes.\n   * \n   * @param {Object} val Value returned by the getItemValue function.\n   * @return {Nothing} No value is returned\n   */\n\n\n  onSelect(val) {\n    this.setState({\n      value: val\n    });\n    console.log(\"Option from 'database' selected : \", val);\n  }\n  /**\n   * Define the markup of every rendered item of the autocomplete.\n   * \n   * @param {Object} item Single object from the data that can be shown inside the autocomplete\n   * @param {Boolean} isHighlighted declares wheter the item has been highlighted or not.\n   * @return {Markup} Component\n   */\n\n\n  renderItem(item, isHighlighted) {\n    return React.createElement(\"div\", {\n      style: {\n        background: isHighlighted ? 'lightgray' : 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, item.label);\n  }\n  /**\n   * Define which property of the autocomplete source will be show to the user.\n   * \n   * @param {Object} item Single object from the data that can be shown inside the autocomplete\n   * @return {String} val\n   */\n\n\n  getItemValue(item) {\n    // You can obviously only return the Label or the component you need to show\n    // In this case we are going to show the value and the label that shows in the input\n    // something like \"1 - Microsoft\"\n    return \"\".concat(item.value, \" - \").concat(item.label);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      getItemValue: this.getItemValue,\n      items: this.state.autocompleteData,\n      renderItem: this.renderItem,\n      value: this.state.value,\n      onChange: this.onChange,\n      onSelect: this.onSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/var/www/html/devis_sayse/src/views/test.js"],"names":["React","Autocomplete","App","Component","constructor","props","context","state","value","autocompleteData","label","onChange","bind","onSelect","getItemValue","renderItem","e","setState","target","console","log","val","item","isHighlighted","background","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\n// Import the Autocomplete Component\nimport Autocomplete from 'react-autocomplete';\n\nexport default class App extends React.Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    // Set initial State\n    this.state = {\n      // Current value of the select field\n      value: \"\",\n      // Data that will be rendered in the autocomplete\n      autocompleteData: [\n        {\n          label: 'Apple',\n          value: 1\n        },\n        {\n          label: 'Microsoft',\n          value: 2\n        },\n        {\n          label: 'Me, Myself and I',\n          value: 3\n        },\n        {\n          label: 'Me, Myself and I',\n          value: 3\n        },\n        {\n          label: 'Me, Myself and I',\n          value: 3\n        },\n        {\n          label: 'Me, Myself and I',\n          value: 3\n        },\n        {\n          label: 'Me, Myself and I',\n          value: 3\n        },\n      ]\n    };\n\n    // Bind `this` context to functions of the class\n    this.onChange = this.onChange.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.getItemValue = this.getItemValue.bind(this);\n    this.renderItem = this.renderItem.bind(this);\n  }\n\n  /**\n   * Callback triggered when the user types in the autocomplete field\n   * \n   * @param {Event} e JavaScript Event\n   * @return {Event} Event of JavaScript can be used as usual.\n   */\n  onChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n\n    console.log(\"The Input Text has changed to \", e.target.value);\n  }\n\n  /**\n   * Callback triggered when the autocomplete input changes.\n   * \n   * @param {Object} val Value returned by the getItemValue function.\n   * @return {Nothing} No value is returned\n   */\n  onSelect(val) {\n    this.setState({\n      value: val\n    });\n\n    console.log(\"Option from 'database' selected : \", val);\n  }\n\n  /**\n   * Define the markup of every rendered item of the autocomplete.\n   * \n   * @param {Object} item Single object from the data that can be shown inside the autocomplete\n   * @param {Boolean} isHighlighted declares wheter the item has been highlighted or not.\n   * @return {Markup} Component\n   */\n  renderItem(item, isHighlighted) {\n    return (\n      <div style={{ background: isHighlighted ? 'lightgray' : 'white' }}>\n        {item.label}\n      </div>\n    );\n  }\n\n  /**\n   * Define which property of the autocomplete source will be show to the user.\n   * \n   * @param {Object} item Single object from the data that can be shown inside the autocomplete\n   * @return {String} val\n   */\n  getItemValue(item) {\n    // You can obviously only return the Label or the component you need to show\n    // In this case we are going to show the value and the label that shows in the input\n    // something like \"1 - Microsoft\"\n    return `${item.value} - ${item.label}`;\n  }\n\n  render() {\n    return (\n      <div>\n        <Autocomplete\n          getItemValue={this.getItemValue}\n          items={this.state.autocompleteData}\n          renderItem={this.renderItem}\n          value={this.state.value}\n          onChange={this.onChange}\n          onSelect={this.onSelect}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}