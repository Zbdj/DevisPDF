{"ast":null,"code":"var _jsxFileName = \"/var/www/html/devis_sayse/src/views/test_input.js\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport ReactGoogleMapLoader from \"react-google-maps-loader\";\nimport ReactGooglePlacesSuggest from \"react-google-places-suggest\";\nimport geodist from 'geodist';\nconst API_KEY = \"AIzaSyAQU3x2PDxhLZEYFk4Af4HBPYDpy40aHEs\";\n\nclass GoogleSuggest extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      value: \"\",\n      value_2: \"\",\n      search_2: \"\",\n      first_adresse: {},\n      last_adresse: {},\n      result: false\n    };\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      search: e.target.value,\n      value: e.target.value,\n      result: false\n    });\n  }\n\n  handleInputChange_1(e) {\n    this.setState({\n      search_2: e.target.value,\n      value_2: e.target.value,\n      result: false\n    });\n  }\n\n  handleSelectSuggest(suggest) {\n    // console.log(suggest.formatted_address)\n    // console.log(suggest.geometry.viewport.ia.j)\n    var first_adresse = {\n      name: suggest.formatted_address,\n      lat: suggest.geometry.viewport.na.j,\n      lon: suggest.geometry.viewport.ia.j\n    };\n    this.setState({\n      search: \"\",\n      value: suggest.formatted_address,\n      first_adresse: first_adresse,\n      result: false\n    });\n  }\n\n  handleSelectSuggest_2(suggest) {\n    // console.log(suggest)\n    var last_adresse = {\n      name: suggest.formatted_address,\n      lat: suggest.geometry.viewport.na.j,\n      lon: suggest.geometry.viewport.ia.j\n    };\n    this.setState({\n      search_2: \"\",\n      value_2: suggest.formatted_address,\n      last_adresse: last_adresse,\n      result: true\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          search = _this$state.search,\n          value = _this$state.value,\n          value_2 = _this$state.value_2,\n          search_2 = _this$state.search_2; // console.log(this.state.first_adresse.name);\n    // console.log(this.state.last_adresse);\n\n    if (this.state.result !== false) {\n      var test = geodist(this.state.first_adresse, this.state.last_adresse, {\n        exact: true,\n        unit: 'meters'\n      }); // => 402.09212137829695\n\n      test = Math.round(test);\n      test = test / 1000; // alert(test/ 1000)\n\n      test = test.toString(); // console.log(test.substr(0, 1));\n\n      if (test.substr(0, 1) === '0') {\n        test = test.slice(2);\n        alert(\"Distance : \" + test + \" metres\");\n      } else {\n        alert(\"Distance : \" + test + \" km\");\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(ReactGoogleMapLoader, {\n      params: {\n        key: API_KEY,\n        libraries: \"places,geocode\"\n      },\n      render: googleMaps => googleMaps && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(ReactGooglePlacesSuggest, {\n        autocompletionRequest: {\n          input: search\n        },\n        googleMaps: googleMaps,\n        onSelectSuggest: this.handleSelectSuggest.bind(this),\n        textNoResults: \"Aucune adresse trouvée..\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: value,\n        placeholder: \"Addresse de d\\xE9part\",\n        onChange: this.handleInputChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), \" \"), \" \"), \" \", React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(ReactGooglePlacesSuggest, {\n        autocompletionRequest: {\n          input: search_2\n        },\n        googleMaps: googleMaps,\n        onSelectSuggest: this.handleSelectSuggest_2.bind(this),\n        style: {\n          height: '500%'\n        },\n        textNoResults: \"Aucune adresse trouvée..\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: value_2,\n        placeholder: \"Adresse d'arriv\\xE9e\",\n        onChange: this.handleInputChange_1.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), \" \"), \" \"), \" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), \" \"), \" \");\n  }\n\n}\n\nGoogleSuggest.propTypes = {\n  googleMaps: PropTypes.object\n};\nexport default GoogleSuggest;","map":{"version":3,"sources":["/var/www/html/devis_sayse/src/views/test_input.js"],"names":["PropTypes","React","ReactGoogleMapLoader","ReactGooglePlacesSuggest","geodist","API_KEY","GoogleSuggest","Component","state","search","value","value_2","search_2","first_adresse","last_adresse","result","handleInputChange","e","setState","target","handleInputChange_1","handleSelectSuggest","suggest","name","formatted_address","lat","geometry","viewport","na","j","lon","ia","handleSelectSuggest_2","render","test","exact","unit","Math","round","toString","substr","slice","alert","key","libraries","googleMaps","input","bind","height","propTypes","object"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\"\nimport React from \"react\"\nimport ReactGoogleMapLoader from \"react-google-maps-loader\"\nimport ReactGooglePlacesSuggest from \"react-google-places-suggest\"\nimport geodist from 'geodist'\n\nconst API_KEY = \"AIzaSyAQU3x2PDxhLZEYFk4Af4HBPYDpy40aHEs\"\nclass GoogleSuggest extends React.Component {\n    state = {\n        search: \"\",\n        value: \"\",\n        value_2: \"\",\n        search_2: \"\",\n        first_adresse: {},\n        last_adresse: {},\n        result: false,\n\n    }\n\n\n    handleInputChange(e) {\n        this.setState({\n            search: e.target.value,\n            value: e.target.value,\n            result: false\n        })\n    }\n    handleInputChange_1(e) {\n        this.setState({\n            search_2: e.target.value,\n            value_2: e.target.value,\n            result: false\n        })\n    }\n\n    handleSelectSuggest(suggest) {\n        // console.log(suggest.formatted_address)\n        // console.log(suggest.geometry.viewport.ia.j)\n        var first_adresse = {\n            name: suggest.formatted_address,\n            lat: suggest.geometry.viewport.na.j,\n            lon: suggest.geometry.viewport.ia.j,\n        }\n\n        this.setState({\n            search: \"\",\n            value: suggest.formatted_address,\n            first_adresse: first_adresse,\n            result: false\n        })\n    }\n    handleSelectSuggest_2(suggest) {\n        // console.log(suggest)\n        var last_adresse = {\n            name: suggest.formatted_address,\n            lat: suggest.geometry.viewport.na.j,\n            lon: suggest.geometry.viewport.ia.j,\n        }\n        this.setState({\n            search_2: \"\",\n            value_2: suggest.formatted_address,\n            last_adresse: last_adresse,\n            result: true\n        })\n    }\n\n    render() {\n        const {\n            search,\n            value,\n            value_2,\n            search_2\n        } = this.state\n\n        // console.log(this.state.first_adresse.name);\n        // console.log(this.state.last_adresse);\n        if (this.state.result !== false) {\n            var test = geodist(this.state.first_adresse, this.state.last_adresse, {\n                exact: true,\n                unit: 'meters'\n            }) // => 402.09212137829695\n\n            test = Math.round(test);\n            test = test / 1000\n            // alert(test/ 1000)\n            test = test.toString();\n\n            // console.log(test.substr(0, 1));\n            if (test.substr(0, 1) === '0') {\n                test = test.slice(2);\n                alert(\"Distance : \" + test + \" metres\")\n            } else {\n                alert(\"Distance : \" + test + \" km\")\n            }\n        }\n\n        return ( <\n            div className = \"container\" >\n            <\n            div className = \"row\" >\n            <\n            ReactGoogleMapLoader params = {\n                {\n                    key: API_KEY,\n                    libraries: \"places,geocode\",\n                }\n            }\n            render = {\n                googleMaps =>\n                googleMaps && ( <\n                    div >\n                    <\n                    div className = \"col-6\" >\n                    <\n                    ReactGooglePlacesSuggest autocompletionRequest = {\n                        {\n                            input: search\n                        }\n                    }\n                    googleMaps = {\n                        googleMaps\n                    }\n                    onSelectSuggest = {\n                        this.handleSelectSuggest.bind(this)\n                    }\n                    textNoResults = {\n                        \"Aucune adresse trouvée..\"\n                    } >\n                    <\n                    input type = \"text\"\n                    value = {\n                        value\n                    }\n                    placeholder = \"Addresse de départ\"\n                    onChange = {\n                        this.handleInputChange.bind(this)\n                    }\n                    /> <\n                    /ReactGooglePlacesSuggest> <\n                    /div> <\n                    div className = \"col-6\" >\n\n                    <\n                    ReactGooglePlacesSuggest autocompletionRequest = {\n                        {\n                            input: search_2\n                        }\n                    }\n                    googleMaps = {\n                        googleMaps\n                    }\n                    onSelectSuggest = {\n                        this.handleSelectSuggest_2.bind(this)\n                    }\n                    style = {\n                        {\n                            height: '500%'\n                        }\n                    }\n                    textNoResults = {\n                        \"Aucune adresse trouvée..\"\n                    }\n\n                    >\n                    <\n                    input type = \"text\"\n                    value = {\n                        value_2\n                    }\n                    placeholder = \"Adresse d'arrivée\"\n                    onChange = {\n                        this.handleInputChange_1.bind(this)\n                    }\n                    /> <\n                    /ReactGooglePlacesSuggest> <\n                    /div> <\n                    /div>\n                )\n            }\n            /> <\n            /div> <\n            /div>\n        )\n    }\n}\n\nGoogleSuggest.propTypes = {\n    googleMaps: PropTypes.object,\n}\n\nexport default GoogleSuggest"]},"metadata":{},"sourceType":"module"}