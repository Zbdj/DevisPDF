{"ast":null,"code":"var _jsxFileName = \"/var/www/html/devis_sayse/src/views/test.js\";\nimport React from 'react'; // Import the Autocomplete Component\n\nimport Autocomplete from 'react-autocomplete';\nexport default class App extends React.Component {\n  constructor(props, context) {\n    super(props, context); // Set initial State\n\n    this.state = {\n      // Current value of the select field\n      value: \"\",\n      // Data that will be rendered in the autocomplete\n      autocompleteData: [{\n        label: 'Apple',\n        value: 1\n      }, {\n        label: 'Microsoft',\n        value: 2\n      }, {\n        label: 'Me, Myself and I',\n        value: 3\n      }, {\n        label: 'Me, Myself and I',\n        value: 3\n      }, {\n        label: 'Me, Myself and I',\n        value: 3\n      }, {\n        label: 'Me, Myself and I',\n        value: 3\n      }, {\n        label: 'Me, Myself and I',\n        value: 3\n      }]\n    }; // Bind `this` context to functions of the class\n\n    this.onChange = this.onChange.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.getItemValue = this.getItemValue.bind(this);\n    this.renderItem = this.renderItem.bind(this);\n  }\n  /**\n   * Callback triggered when the user types in the autocomplete field\n   * \n   * @param {Event} e JavaScript Event\n   * @return {Event} Event of JavaScript can be used as usual.\n   */\n\n\n  onChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n    console.log(\"The Input Text has changed to \", e.target.value);\n  }\n  /**\n   * Callback triggered when the autocomplete input changes.\n   * \n   * @param {Object} val Value returned by the getItemValue function.\n   * @return {Nothing} No value is returned\n   */\n\n\n  onSelect(val) {\n    this.setState({\n      value: val\n    });\n    console.log(\"Option from 'database' selected : \", val);\n  }\n  /**\n   * Define the markup of every rendered item of the autocomplete.\n   * \n   * @param {Object} item Single object from the data that can be shown inside the autocomplete\n   * @param {Boolean} isHighlighted declares wheter the item has been highlighted or not.\n   * @return {Markup} Component\n   */\n\n\n  renderItem(item, isHighlighted) {\n    return React.createElement(\"div\", {\n      style: {\n        background: isHighlighted ? 'lightgray' : 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, item.label);\n  }\n  /**\n   * Define which property of the autocomplete source will be show to the user.\n   * \n   * @param {Object} item Single object from the data that can be shown inside the autocomplete\n   * @return {String} val\n   */\n\n\n  getItemValue(item) {\n    // You can obviously only return the Label or the component you need to show\n    // In this case we are going to show the value and the label that shows in the input\n    // something like \"1 - Microsoft\"\n    return \"\".concat(item.value, \" - \").concat(item.label);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      getItemValue: this.getItemValue,\n      items: this.state.autocompleteData,\n      renderItem: this.renderItem,\n      value: this.state.value,\n      onChange: this.onChange,\n      onSelect: this.onSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/var/www/html/devis_sayse/src/views/test.js"],"names":["React","Autocomplete","App","Component","constructor","props","context","state","value","autocompleteData","label","onChange","bind","onSelect","getItemValue","renderItem","e","setState","target","console","log","val","item","isHighlighted","background","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\n// Import the Autocomplete Component\nimport Autocomplete from 'react-autocomplete';\n\nexport default class App extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        // Set initial State\n        this.state = {\n            // Current value of the select field\n            value: \"\",\n            // Data that will be rendered in the autocomplete\n            autocompleteData: [\n                { \n                    label: 'Apple',\n                    value: 1\n                },\n                { \n                    label: 'Microsoft',\n                    value: 2\n                },\n                { \n                    label: 'Me, Myself and I',\n                    value: 3\n                },\n                { \n                  label: 'Me, Myself and I',\n                  value: 3\n              },\n              { \n                label: 'Me, Myself and I',\n                value: 3\n            },\n            { \n              label: 'Me, Myself and I',\n              value: 3\n          },\n          { \n            label: 'Me, Myself and I',\n            value: 3\n        },\n            ]\n        };\n\n        // Bind `this` context to functions of the class\n        this.onChange = this.onChange.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n        this.getItemValue = this.getItemValue.bind(this);\n        this.renderItem = this.renderItem.bind(this);\n    }\n    \n    /**\n     * Callback triggered when the user types in the autocomplete field\n     * \n     * @param {Event} e JavaScript Event\n     * @return {Event} Event of JavaScript can be used as usual.\n     */\n    onChange(e){\n        this.setState({\n            value: e.target.value\n        });\n\n        console.log(\"The Input Text has changed to \", e.target.value);\n    }\n\n    /**\n     * Callback triggered when the autocomplete input changes.\n     * \n     * @param {Object} val Value returned by the getItemValue function.\n     * @return {Nothing} No value is returned\n     */\n    onSelect(val){\n        this.setState({\n            value: val\n        });\n\n        console.log(\"Option from 'database' selected : \", val);\n    }\n\n    /**\n     * Define the markup of every rendered item of the autocomplete.\n     * \n     * @param {Object} item Single object from the data that can be shown inside the autocomplete\n     * @param {Boolean} isHighlighted declares wheter the item has been highlighted or not.\n     * @return {Markup} Component\n     */\n    renderItem(item, isHighlighted){\n        return (\n            <div style={{ background: isHighlighted ? 'lightgray' : 'white' }}>\n                {item.label}\n            </div>   \n        ); \n    }\n\n    /**\n     * Define which property of the autocomplete source will be show to the user.\n     * \n     * @param {Object} item Single object from the data that can be shown inside the autocomplete\n     * @return {String} val\n     */\n    getItemValue(item){\n        // You can obviously only return the Label or the component you need to show\n        // In this case we are going to show the value and the label that shows in the input\n        // something like \"1 - Microsoft\"\n        return `${item.value} - ${item.label}`;\n    }\n\n    render() {\n        return (\n            <div>\n                <Autocomplete\n                    getItemValue={this.getItemValue}\n                    items={this.state.autocompleteData}\n                    renderItem={this.renderItem}\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    onSelect={this.onSelect}\n                />\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}