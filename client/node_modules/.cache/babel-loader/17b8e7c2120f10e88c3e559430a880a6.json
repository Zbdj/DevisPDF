{"ast":null,"code":"var _jsxFileName = \"/var/www/html/devis_sayse/src/views/test_input.js\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport ReactGoogleMapLoader from \"react-google-maps-loader\";\nimport ReactGooglePlacesSuggest from \"react-google-places-suggest\";\nimport geodist from 'geodist';\nconst API_KEY = \"AIzaSyAQU3x2PDxhLZEYFk4Af4HBPYDpy40aHEs\";\nexport default class GoogleSuggest extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      value: \"\",\n      value_2: \"\",\n      search_2: \"\",\n      first_adresse: {},\n      last_adresse: {},\n      select_1: false,\n      select_2: false\n    };\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      search: e.target.value,\n      value: e.target.value,\n      result: false\n    });\n  }\n\n  handleInputChange_1(e) {\n    this.setState({\n      search_2: e.target.value,\n      value_2: e.target.value,\n      result: false\n    });\n  }\n\n  handleSelectSuggest(suggest) {\n    // console.log(suggest.formatted_address)\n    // console.log(suggest.geometry.viewport.ia.j)\n    var first_adresse = {\n      name: suggest.formatted_address,\n      lat: suggest.geometry.viewport.na.j,\n      lon: suggest.geometry.viewport.ia.j\n    };\n    this.setState({\n      search: \"\",\n      value: suggest.formatted_address,\n      first_adresse: first_adresse,\n      select_1: true\n    });\n  }\n\n  handleSelectSuggest_2(suggest) {\n    // console.log(suggest)\n    var last_adresse = {\n      name: suggest.formatted_address,\n      lat: suggest.geometry.viewport.na.j,\n      lon: suggest.geometry.viewport.ia.j\n    };\n    this.setState({\n      search_2: \"\",\n      value_2: suggest.formatted_address,\n      last_adresse: last_adresse,\n      select_2: true\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          search = _this$state.search,\n          value = _this$state.value,\n          value_2 = _this$state.value_2,\n          search_2 = _this$state.search_2;\n\n    if (this.state.select_1 !== false && this.state.select_2 !== false) {\n      var test = geodist(this.state.first_adresse, this.state.last_adresse, {\n        exact: true,\n        unit: 'meters'\n      }); // => 402.09212137829695\n\n      test = Math.round(test);\n      test = test / 1000;\n      test = test.toString();\n\n      if (test.substr(0, 1) === '0') {\n        test = test.slice(2); // alert(\"Distance : \" + test + \" metres\")\n\n        return React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \" Distance : \", test, \" metres\"));\n      } else {\n        // alert(\"Distance : \" + test + \" km\")\n        return React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, \" Distance : \", test, \" km\"));\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(ReactGoogleMapLoader, {\n      params: {\n        key: API_KEY,\n        libraries: \"places,geocode\"\n      },\n      render: googleMaps => googleMaps && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(ReactGooglePlacesSuggest, {\n        autocompletionRequest: {\n          input: search\n        },\n        googleMaps: googleMaps,\n        onSelectSuggest: this.handleSelectSuggest.bind(this),\n        textNoResults: \"Aucune adresse trouvée..\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: value,\n        placeholder: \"Addresse de d\\xE9part\",\n        onChange: this.handleInputChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })), React.createElement(ReactGooglePlacesSuggest, {\n        autocompletionRequest: {\n          input: search_2\n        },\n        googleMaps: googleMaps,\n        onSelectSuggest: this.handleSelectSuggest_2.bind(this),\n        textNoResults: \"Aucune adresse trouvée..\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: value_2,\n        placeholder: \"Adresse d'arriv\\xE9e\",\n        onChange: this.handleInputChange_1.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n} // GoogleSuggest.propTypes = {\n//     googleMaps: PropTypes.object,\n// }","map":{"version":3,"sources":["/var/www/html/devis_sayse/src/views/test_input.js"],"names":["PropTypes","React","ReactGoogleMapLoader","ReactGooglePlacesSuggest","geodist","API_KEY","GoogleSuggest","Component","state","search","value","value_2","search_2","first_adresse","last_adresse","select_1","select_2","handleInputChange","e","setState","target","result","handleInputChange_1","handleSelectSuggest","suggest","name","formatted_address","lat","geometry","viewport","na","j","lon","ia","handleSelectSuggest_2","render","test","exact","unit","Math","round","toString","substr","slice","key","libraries","googleMaps","input","bind"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\"\nimport React from \"react\"\nimport ReactGoogleMapLoader from \"react-google-maps-loader\"\nimport ReactGooglePlacesSuggest from \"react-google-places-suggest\"\nimport geodist from 'geodist'\n\nconst API_KEY = \"AIzaSyAQU3x2PDxhLZEYFk4Af4HBPYDpy40aHEs\"\nexport default class GoogleSuggest extends React.Component {\n    state = {\n        search: \"\",\n        value: \"\",\n        value_2: \"\",\n        search_2: \"\",\n        first_adresse: {},\n        last_adresse: {},\n        select_1: false,\n        select_2: false,\n\n    }\n\n\n    handleInputChange(e) {\n        this.setState({ search: e.target.value, value: e.target.value, result: false })\n    }\n    handleInputChange_1(e) {\n        this.setState({ search_2: e.target.value, value_2: e.target.value, result: false })\n    }\n\n    handleSelectSuggest(suggest) {\n        // console.log(suggest.formatted_address)\n        // console.log(suggest.geometry.viewport.ia.j)\n        var first_adresse = {\n            name: suggest.formatted_address,\n            lat: suggest.geometry.viewport.na.j,\n            lon: suggest.geometry.viewport.ia.j,\n        }\n\n        this.setState({ search: \"\", value: suggest.formatted_address, first_adresse: first_adresse, select_1: true })\n    }\n    handleSelectSuggest_2(suggest) {\n        // console.log(suggest)\n        var last_adresse = {\n            name: suggest.formatted_address,\n            lat: suggest.geometry.viewport.na.j,\n            lon: suggest.geometry.viewport.ia.j,\n        }\n        this.setState({ search_2: \"\", value_2: suggest.formatted_address, last_adresse: last_adresse, select_2: true })\n    }\n\n    render() {\n        const { search, value, value_2, search_2 } = this.state\n\n\n        if (this.state.select_1 !== false && this.state.select_2 !== false ) {\n            var test = geodist(this.state.first_adresse, this.state.last_adresse, { exact: true, unit: 'meters' })     // => 402.09212137829695\n\n            test = Math.round(test);\n            test = test / 1000\n            test = test.toString();\n\n            if (test.substr(0, 1) === '0') {\n                test = test.slice(2);\n                // alert(\"Distance : \" + test + \" metres\")\n                return(\n                    <div className=\"container\">\n                        <p> Distance : { test } metres</p>\n                    </div>\n                );\n            }\n            else {\n                // alert(\"Distance : \" + test + \" km\")\n                return(\n                    <div className=\"container\">\n                        <p> Distance : { test } km</p>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <ReactGoogleMapLoader\n                    params={{\n                        key: API_KEY,\n                        libraries: \"places,geocode\",\n                    }}\n                    render={googleMaps =>\n                        googleMaps && (\n                            <div>\n                                <ReactGooglePlacesSuggest\n                                    autocompletionRequest={{ input: search }}\n                                    googleMaps={googleMaps}\n                                    onSelectSuggest={this.handleSelectSuggest.bind(this)}\n                                    textNoResults={\"Aucune adresse trouvée..\"}\n                                >\n                                    <input\n                                        type=\"text\"\n                                        value={value}\n                                        placeholder=\"Addresse de départ\"\n                                        onChange={this.handleInputChange.bind(this)}\n                                    />\n                                </ReactGooglePlacesSuggest>\n\n                                <ReactGooglePlacesSuggest\n                                    autocompletionRequest={{ input: search_2 }}\n                                    googleMaps={googleMaps}\n                                    onSelectSuggest={this.handleSelectSuggest_2.bind(this)}\n                                    textNoResults={\"Aucune adresse trouvée..\"}\n\n                                >\n                                    <input\n                                        type=\"text\"\n                                        value={value_2}\n                                        placeholder=\"Adresse d'arrivée\"\n                                        onChange={this.handleInputChange_1.bind(this)}\n                                    />\n                                </ReactGooglePlacesSuggest>\n                            </div>\n                        )\n                    }\n                />\n            </div>\n        )\n    }\n}\n\n// GoogleSuggest.propTypes = {\n//     googleMaps: PropTypes.object,\n// }"]},"metadata":{},"sourceType":"module"}