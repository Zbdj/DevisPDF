{"ast":null,"code":"var _jsxFileName = \"/var/www/html/devis_sayse/src/views/test.js\";\nimport React from \"react\";\nimport { Select, Icon, Button, Form, Input } from \"antd\";\nconst FormItem = Form.Item;\nconst TextArea = Input.TextArea;\nconst Option = Select.Option;\nconst SELECT = [\"opt1\", \"opt2\"];\n\nclass TestForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      listKeys: [0]\n    };\n\n    this.remove = k => {\n      const listKeys = this.state.listKeys;\n\n      if (listKeys.length === 1) {\n        return;\n      }\n\n      this.setState({\n        listKeys: listKeys.filter(key => key !== k)\n      });\n    };\n\n    this.add = () => {\n      const listKeys = this.state.listKeys;\n      this.setState({\n        listKeys: [...listKeys, listKeys.length]\n      });\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          setFieldsValue = _this$props.form.setFieldsValue,\n          listKeys = _this$props.listKeys;\n    this.setState({\n      listKeys\n    }); // WORK\n    // setFieldsValue({\n    //   name: 'test',\n    // });\n    // setFieldsValue({\n    //   name: 'test',\n    //   list: [\n    //     {\n    //       sub1: 'test1',\n    //       sub2: 'test2',\n    //     }\n    //   ]\n    // });\n    // !!!!!!!!!!!! NOT WORK\n    // setFieldsValue({\n    //   name: 'test',\n    //   list: [\n    //     {\n    //       sub1: 'test1',\n    //       sub2: 'opt2'\n    //     },\n    //     {\n    //       sub1: 'test11',\n    //       sub2: 'opt1'\n    //     }\n    //   ]\n    // });\n\n    setFieldsValue({\n      name: \"test\",\n      list: [{\n        sub1: \"test1\",\n        sub2: \"opt2\",\n        opt2sub: \"bla\"\n      }, {\n        sub1: \"test11\",\n        sub2: \"opt1\"\n      }, {\n        sub1: \"test3\",\n        sub2: \"opt2\",\n        opt2sub: \"bla\"\n      }]\n    });\n  }\n\n  render() {\n    const _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldValue = _this$props$form.getFieldValue;\n    const listKeys = this.state.listKeys;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      label: \"Sub1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, getFieldDecorator(\"list[\".concat(key, \"].sub1\"), {\n      initialValue: this.props.list[key].sub1\n    })(React.createElement(Input, {\n      placeholder: \"Sub1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Form.create()(TestForm);","map":{"version":3,"sources":["/var/www/html/devis_sayse/src/views/test.js"],"names":["React","Select","Icon","Button","Form","Input","FormItem","Item","TextArea","Option","SELECT","TestForm","Component","state","listKeys","remove","k","length","setState","filter","key","add","componentDidMount","props","setFieldsValue","form","name","list","sub1","sub2","opt2sub","render","getFieldDecorator","getFieldValue","initialValue","create"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,MAAvB,EAA+BC,IAA/B,EAAqCC,KAArC,QAAkD,MAAlD;AAEA,MAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAtB;AACA,MAAMC,QAAQ,GAAGH,KAAK,CAACG,QAAvB;AACA,MAAMC,MAAM,GAAGR,MAAM,CAACQ,MAAtB;AAEA,MAAMC,MAAM,GAAG,CAAC,MAAD,EAAS,MAAT,CAAf;;AAEA,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,KADqC,GAC7B;AACNC,MAAAA,QAAQ,EAAE,CAAC,CAAD;AADJ,KAD6B;;AAAA,SAkErCC,MAlEqC,GAkE5BC,CAAC,IAAI;AAAA,YACJF,QADI,GACS,KAAKD,KADd,CACJC,QADI;;AAGZ,UAAIA,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzB;AACD;;AAED,WAAKC,QAAL,CAAc;AACZJ,QAAAA,QAAQ,EAAEA,QAAQ,CAACK,MAAT,CAAgBC,GAAG,IAAIA,GAAG,KAAKJ,CAA/B;AADE,OAAd;AAGD,KA5EoC;;AAAA,SA8ErCK,GA9EqC,GA8E/B,MAAM;AAAA,YACFP,QADE,GACW,KAAKD,KADhB,CACFC,QADE;AAGV,WAAKI,QAAL,CAAc;AACZJ,QAAAA,QAAQ,EAAE,CAAC,GAAGA,QAAJ,EAAcA,QAAQ,CAACG,MAAvB;AADE,OAAd;AAGD,KApFoC;AAAA;;AAKrCK,EAAAA,iBAAiB,GAAG;AAAA,wBAId,KAAKC,KAJS;AAAA,UAERC,cAFQ,eAEhBC,IAFgB,CAERD,cAFQ;AAAA,UAGhBV,QAHgB,eAGhBA,QAHgB;AAKlB,SAAKI,QAAL,CAAc;AAACJ,MAAAA;AAAD,KAAd,EALkB,CAUlB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAU,IAAAA,cAAc,CAAC;AACbE,MAAAA,IAAI,EAAE,MADO;AAEbC,MAAAA,IAAI,EAAE,CACJ;AACEC,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,IAAI,EAAE,MAFR;AAGEC,QAAAA,OAAO,EAAE;AAHX,OADI,EAMJ;AACEF,QAAAA,IAAI,EAAE,QADR;AAEEC,QAAAA,IAAI,EAAE;AAFR,OANI,EAUJ;AACED,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,IAAI,EAAE,MAFR;AAGEC,QAAAA,OAAO,EAAE;AAHX,OAVI;AAFO,KAAD,CAAd;AAmBD;;AAsBDC,EAAAA,MAAM,GAAG;AAAA,6BAGH,KAAKR,KAHF,CAELE,IAFK;AAAA,UAEGO,iBAFH,oBAEGA,iBAFH;AAAA,UAEsBC,aAFtB,oBAEsBA,aAFtB;AAAA,UAICnB,QAJD,GAIc,KAAKD,KAJnB,CAICC,QAJD;AAMP,WACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCkB,iBAAiB,gBAASZ,GAAT,aAAsB;AAACc,MAAAA,YAAY,EAAE,KAAKX,KAAL,CAAWI,IAAX,CAAgBP,GAAhB,EAAqBQ;AAApC,KAAtB,CAAjB,CACC,oBAAC,KAAD;AAAO,MAAA,WAAW,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD,CADN,CADI;AAgED;;AA5JoC;;AA+JvC,eAAexB,IAAI,CAAC+B,MAAL,GAAcxB,QAAd,CAAf","sourcesContent":["import React from \"react\";\nimport { Select, Icon, Button, Form, Input } from \"antd\";\n\nconst FormItem = Form.Item;\nconst TextArea = Input.TextArea;\nconst Option = Select.Option;\n\nconst SELECT = [\"opt1\", \"opt2\"];\n\nclass TestForm extends React.Component {\n  state = {\n    listKeys: [0]\n  };\n\n  componentDidMount() {\n    const {\n      form: { setFieldsValue },\n      listKeys,\n    } = this.props;\n    this.setState({listKeys})\n  \n  \n\n  \n    // WORK\n    // setFieldsValue({\n    //   name: 'test',\n    // });\n\n    // setFieldsValue({\n    //   name: 'test',\n    //   list: [\n    //     {\n    //       sub1: 'test1',\n    //       sub2: 'test2',\n    //     }\n    //   ]\n    // });\n\n    // !!!!!!!!!!!! NOT WORK\n    // setFieldsValue({\n    //   name: 'test',\n    //   list: [\n    //     {\n    //       sub1: 'test1',\n    //       sub2: 'opt2'\n    //     },\n    //     {\n    //       sub1: 'test11',\n    //       sub2: 'opt1'\n    //     }\n    //   ]\n    // });\n\n    setFieldsValue({\n      name: \"test\",\n      list: [\n        {\n          sub1: \"test1\",\n          sub2: \"opt2\",\n          opt2sub: \"bla\"\n        },\n        {\n          sub1: \"test11\",\n          sub2: \"opt1\"\n        },\n        {\n          sub1: \"test3\",\n          sub2: \"opt2\",\n          opt2sub: \"bla\"\n        }\n      ]\n    });\n  }\n\n  remove = k => {\n    const { listKeys } = this.state;\n\n    if (listKeys.length === 1) {\n      return;\n    }\n\n    this.setState({\n      listKeys: listKeys.filter(key => key !== k)\n    });\n  };\n\n  add = () => {\n    const { listKeys } = this.state;\n\n    this.setState({\n      listKeys: [...listKeys, listKeys.length]\n    });\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator, getFieldValue }\n    } = this.props;\n    const { listKeys } = this.state;\n\n    return (\n<div>\n      <FormItem label=\"Sub1\">\n      {getFieldDecorator(`list[${key}].sub1`, {initialValue: this.props.list[key].sub1})(\n        <Input placeholder=\"Sub1\" />\n      )}\n    </FormItem>\n       {/* <Form onSubmit={this.handleSubmit}>\n         <FormItem label=\"Name\">\n           {getFieldDecorator(\"name\")(<Input placeholder=\"name\" />)}\n         </FormItem>\n         {listKeys.map((key, index) => {\n           const type = getFieldValue(`list[${key}].sub2`); */}\n\n           {/* return ( */}\n             {/* <div key={key}>\n               <FormItem label=\"Sub1\">\n                 {getFieldDecorator(`list[${key}].sub1`)(\n                   <Input placeholder=\"Sub1\" />\n                 )}\n               </FormItem>\n               <FormItem label=\"Sub2\">\n                 {getFieldDecorator(`list[${key}].sub2`, {\n                   initialValue: \"opt1\"\n                 })(\n                   <Select>\n                     {SELECT.map(item => (\n                       <Option key={item} value={item}>\n                         {item}\n                       </Option>\n                     ))}\n                   </Select>\n                 )}\n               </FormItem>\n               {type === \"opt2\" && (\n                 <FormItem label=\"opt2sub\">\n                   {getFieldDecorator(`list[${key}].opt2sub`)(\n                     <Input placeholder=\"opt2sub\" />\n                   )}\n                 </FormItem>\n               )}\n               {index > 0 && (\n                 <Icon\n                   className=\"dynamic-delete-button\"\n                   type=\"minus-circle-o\"\n                   onClick={() => this.remove(key)}\n                 />\n               )}\n             </div>\n           );\n         })}\n        <FormItem>\n          <Button type=\"dashed\" onClick={this.add}>\n            <Icon type=\"plus\" />Add field\n          </Button>\n        </FormItem> */}\n        {/* <FormItem>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </FormItem>\n      </Form> */}\n      </div>\n    );\n  }\n}\n\nexport default Form.create()(TestForm);\n"]},"metadata":{},"sourceType":"module"}