{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { filter } from './filter';\n\nvar FilterResults = function (_Component) {\n  _inherits(FilterResults, _Component);\n\n  function FilterResults() {\n    _classCallCheck(this, FilterResults);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  FilterResults.prototype.render = function render() {\n    var _props = this.props,\n        value = _props.value,\n        data = _props.data;\n    return this.props.renderResults(filter(value, data));\n  };\n\n  return FilterResults;\n}(Component);\n\nexport { FilterResults as default };\nFilterResults.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  value: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  renderResults: PropTypes.func.isRequired\n} : {};","map":null,"metadata":{},"sourceType":"module"}