{"ast":null,"code":"var _jsxFileName = \"/var/www/html/devis_sayse/src/views/test.js\";\nimport React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest'; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nconst getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, suggestion.name);\n\nclass Example extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Type a programming language',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/var/www/html/devis_sayse/src/views/test.js"],"names":["React","Component","Autosuggest","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","languages","filter","lang","name","slice","getSuggestionValue","suggestion","renderSuggestion","Example","constructor","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","render","inputProps","placeholder"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,mBAAxB,C,CAGE;;AACA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,QAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBE,SAAS,CAACC,MAAV,CAAiBC,IAAI,IACnDA,IAAI,CAACC,IAAL,CAAUN,WAAV,GAAwBO,KAAxB,CAA8B,CAA9B,EAAiCN,WAAjC,MAAkDH,UADpB,CAAhC;AAGD,CAPD,C,CASA;AACA;AACA;;;AACA,MAAMU,kBAAkB,GAAGC,UAAU,IAAIA,UAAU,CAACH,IAApD,C,CAEA;;;AACA,MAAMI,gBAAgB,GAAGD,UAAU,IACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGA,UAAU,CAACH,IADd,CADF;;AAOF,MAAMK,OAAN,SAAsBlB,KAAK,CAACC,SAA5B,CAAsC;AACpCkB,EAAAA,WAAW,GAAG;AACZ,YADY,CAGZ;AACA;AACA;AACA;AACA;;AAPY,SAcdC,QAdc,GAcH,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZnB,QAAAA,KAAK,EAAEkB;AADK,OAAd;AAGD,KAlBa;;AAAA,SAsBdE,2BAtBc,GAsBgB,CAAC;AAAEpB,MAAAA;AAAF,KAAD,KAAe;AAC3C,WAAKmB,QAAL,CAAc;AACZE,QAAAA,WAAW,EAAEtB,cAAc,CAACC,KAAD;AADf,OAAd;AAGD,KA1Ba;;AAAA,SA6BdsB,2BA7Bc,GA6BgB,MAAM;AAClC,WAAKH,QAAL,CAAc;AACZE,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAjCa;;AAQZ,SAAKE,KAAL,GAAa;AACXvB,MAAAA,KAAK,EAAE,EADI;AAEXqB,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAuBDG,EAAAA,MAAM,GAAG;AAAA,wBACwB,KAAKD,KAD7B;AAAA,UACCvB,KADD,eACCA,KADD;AAAA,UACQqB,WADR,eACQA,WADR,EAGP;;AACA,UAAMI,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,6BADI;AAEjB1B,MAAAA,KAFiB;AAGjBgB,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB,CAJO,CAUP;;AACA,WACE,oBAAC,WAAD;AACE,MAAA,WAAW,EAAEK,WADf;AAEE,MAAA,2BAA2B,EAAE,KAAKD,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAKE,2BAHpC;AAIE,MAAA,kBAAkB,EAAEX,kBAJtB;AAKE,MAAA,gBAAgB,EAAEE,gBALpB;AAME,MAAA,UAAU,EAAEY,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AAzDmC","sourcesContent":["import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\n\n   \n  // Teach Autosuggest how to calculate suggestions for any given input value.\n  const getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n   \n    return inputLength === 0 ? [] : languages.filter(lang =>\n      lang.name.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n   \n  // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n  const getSuggestionValue = suggestion => suggestion.name;\n   \n  // Use your imagination to render suggestions.\n  const renderSuggestion = suggestion => (\n    <div>\n      {suggestion.name}\n    </div>\n  );\n\n \nclass Example extends React.Component {\n  constructor() {\n    super();\n \n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n \n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n \n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n \n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n \n  render() {\n    const { value, suggestions } = this.state;\n \n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Type a programming language',\n      value,\n      onChange: this.onChange\n    };\n \n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}