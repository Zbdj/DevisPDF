{"ast":null,"code":"var _jsxFileName = \"/var/www/html/devis_sayse/src/views/test_input.js\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport ReactGoogleMapLoader from \"react-google-maps-loader\";\nimport ReactGooglePlacesSuggest from \"react-google-places-suggest\";\nimport geodist from 'geodist';\nconst API_KEY = \"AIzaSyAQU3x2PDxhLZEYFk4Af4HBPYDpy40aHEs\";\n\nclass GoogleSuggest extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      value: \"\",\n      value_2: \"\",\n      search_2: \"\",\n      first_adresse: {},\n      last_adresse: {},\n      result: false\n    };\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      search: e.target.value,\n      value: e.target.value,\n      result: false\n    });\n  }\n\n  handleInputChange_1(e) {\n    this.setState({\n      search_2: e.target.value,\n      value_2: e.target.value,\n      result: false\n    });\n  }\n\n  handleSelectSuggest(suggest) {\n    // console.log(suggest.formatted_address)\n    // console.log(suggest.geometry.viewport.ia.j)\n    var first_adresse = {\n      name: suggest.formatted_address,\n      lat: suggest.geometry.viewport.na.j,\n      lon: suggest.geometry.viewport.ia.j\n    };\n    this.setState({\n      search: \"\",\n      value: suggest.formatted_address,\n      first_adresse: first_adresse,\n      result: false\n    });\n  }\n\n  handleSelectSuggest_2(suggest) {\n    // console.log(suggest)\n    var last_adresse = {\n      name: suggest.formatted_address,\n      lat: suggest.geometry.viewport.na.j,\n      lon: suggest.geometry.viewport.ia.j\n    };\n    this.setState({\n      search_2: \"\",\n      value_2: suggest.formatted_address,\n      last_adresse: last_adresse,\n      result: true\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          search = _this$state.search,\n          value = _this$state.value,\n          value_2 = _this$state.value_2,\n          search_2 = _this$state.search_2; // console.log(this.state.first_adresse.name);\n    // console.log(this.state.last_adresse);\n\n    if (this.state.result !== false) {\n      var test = geodist(this.state.first_adresse, this.state.last_adresse, {\n        exact: true,\n        unit: 'meters'\n      }); // => 402.09212137829695\n\n      test = Math.round(test);\n      test = test / 1000; // alert(test/ 1000)\n\n      test = test.toString(); // console.log(test.substr(0, 1));\n\n      if (test.substr(0, 1) === '0') {\n        test = test.slice(2);\n        alert(\"Distance : \" + test + \" metres\");\n      } else {\n        alert(\"Distance : \" + test + \" km\");\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(ReactGoogleMapLoader, {\n      params: {\n        key: API_KEY,\n        libraries: \"places,geocode\"\n      },\n      render: googleMaps => googleMaps && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(ReactGooglePlacesSuggest, {\n        autocompletionRequest: {\n          input: search\n        },\n        googleMaps: googleMaps,\n        onSelectSuggest: this.handleSelectSuggest.bind(this),\n        textNoResults: \"Aucune adresse trouvée..\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: value,\n        placeholder: \"Addresse de d\\xE9part\",\n        onChange: this.handleInputChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(ReactGooglePlacesSuggest, {\n        autocompletionRequest: {\n          input: search_2\n        },\n        googleMaps: googleMaps,\n        onSelectSuggest: this.handleSelectSuggest_2.bind(this),\n        style: {\n          height: '500%'\n        },\n        textNoResults: \"Aucune adresse trouvée..\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: value_2,\n        placeholder: \"Adresse d'arriv\\xE9e\",\n        onChange: this.handleInputChange_1.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })));\n  }\n\n}\n\nGoogleSuggest.propTypes = {\n  googleMaps: PropTypes.object\n};\nexport default GoogleSuggest;","map":{"version":3,"sources":["/var/www/html/devis_sayse/src/views/test_input.js"],"names":["PropTypes","React","ReactGoogleMapLoader","ReactGooglePlacesSuggest","geodist","API_KEY","GoogleSuggest","Component","state","search","value","value_2","search_2","first_adresse","last_adresse","result","handleInputChange","e","setState","target","handleInputChange_1","handleSelectSuggest","suggest","name","formatted_address","lat","geometry","viewport","na","j","lon","ia","handleSelectSuggest_2","render","test","exact","unit","Math","round","toString","substr","slice","alert","key","libraries","googleMaps","input","bind","height","propTypes","object"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,oBAAP,MAAiC,0BAAjC;AACA,OAAOC,wBAAP,MAAqC,6BAArC;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,MAAMC,OAAO,GAAG,yCAAhB;;AACA,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA4C;AAAA;AAAA;AAAA,SACxCC,KADwC,GAChC;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,KAAK,EAAE,EAFH;AAGJC,MAAAA,OAAO,EAAE,EAHL;AAIJC,MAAAA,QAAQ,EAAE,EAJN;AAKJC,MAAAA,aAAa,EAAE,EALX;AAMJC,MAAAA,YAAY,EAAE,EANV;AAOJC,MAAAA,MAAM,EAAE;AAPJ,KADgC;AAAA;;AAaxCC,EAAAA,iBAAiB,CAACC,CAAD,EAAI;AACjB,SAAKC,QAAL,CAAc;AAAET,MAAAA,MAAM,EAAEQ,CAAC,CAACE,MAAF,CAAST,KAAnB;AAA0BA,MAAAA,KAAK,EAAEO,CAAC,CAACE,MAAF,CAAST,KAA1C;AAAiDK,MAAAA,MAAM,EAAE;AAAzD,KAAd;AACH;;AACDK,EAAAA,mBAAmB,CAACH,CAAD,EAAI;AACnB,SAAKC,QAAL,CAAc;AAAEN,MAAAA,QAAQ,EAAEK,CAAC,CAACE,MAAF,CAAST,KAArB;AAA4BC,MAAAA,OAAO,EAAEM,CAAC,CAACE,MAAF,CAAST,KAA9C;AAAqDK,MAAAA,MAAM,EAAE;AAA7D,KAAd;AACH;;AAEDM,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AACzB;AACA;AACA,QAAIT,aAAa,GAAG;AAChBU,MAAAA,IAAI,EAAED,OAAO,CAACE,iBADE;AAEhBC,MAAAA,GAAG,EAAEH,OAAO,CAACI,QAAR,CAAiBC,QAAjB,CAA0BC,EAA1B,CAA6BC,CAFlB;AAGhBC,MAAAA,GAAG,EAAER,OAAO,CAACI,QAAR,CAAiBC,QAAjB,CAA0BI,EAA1B,CAA6BF;AAHlB,KAApB;AAMA,SAAKX,QAAL,CAAc;AAAET,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,KAAK,EAAEY,OAAO,CAACE,iBAA7B;AAAgDX,MAAAA,aAAa,EAAEA,aAA/D;AAA8EE,MAAAA,MAAM,EAAE;AAAtF,KAAd;AACH;;AACDiB,EAAAA,qBAAqB,CAACV,OAAD,EAAU;AAC3B;AACA,QAAIR,YAAY,GAAG;AACfS,MAAAA,IAAI,EAAED,OAAO,CAACE,iBADC;AAEfC,MAAAA,GAAG,EAAEH,OAAO,CAACI,QAAR,CAAiBC,QAAjB,CAA0BC,EAA1B,CAA6BC,CAFnB;AAGfC,MAAAA,GAAG,EAAER,OAAO,CAACI,QAAR,CAAiBC,QAAjB,CAA0BI,EAA1B,CAA6BF;AAHnB,KAAnB;AAKA,SAAKX,QAAL,CAAc;AAAEN,MAAAA,QAAQ,EAAE,EAAZ;AAAgBD,MAAAA,OAAO,EAAEW,OAAO,CAACE,iBAAjC;AAAoDV,MAAAA,YAAY,EAAEA,YAAlE;AAAgFC,MAAAA,MAAM,EAAE;AAAxF,KAAd;AACH;;AAEDkB,EAAAA,MAAM,GAAG;AAAA,wBACwC,KAAKzB,KAD7C;AAAA,UACGC,MADH,eACGA,MADH;AAAA,UACWC,KADX,eACWA,KADX;AAAA,UACkBC,OADlB,eACkBA,OADlB;AAAA,UAC2BC,QAD3B,eAC2BA,QAD3B,EAGL;AACA;;AACA,QAAI,KAAKJ,KAAL,CAAWO,MAAX,KAAsB,KAA1B,EAAiC;AAC7B,UAAImB,IAAI,GAAG9B,OAAO,CAAC,KAAKI,KAAL,CAAWK,aAAZ,EAA2B,KAAKL,KAAL,CAAWM,YAAtC,EAAoD;AAAEqB,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,IAAI,EAAE;AAArB,OAApD,CAAlB,CAD6B,CAC8E;;AAE3GF,MAAAA,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAP;AACAA,MAAAA,IAAI,GAAGA,IAAI,GAAG,IAAd,CAJ6B,CAK7B;;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACK,QAAL,EAAP,CAN6B,CAQ7B;;AACA,UAAIL,IAAI,CAACM,MAAL,CAAY,CAAZ,EAAe,CAAf,MAAsB,GAA1B,EAA+B;AAC3BN,QAAAA,IAAI,GAAGA,IAAI,CAACO,KAAL,CAAW,CAAX,CAAP;AACAC,QAAAA,KAAK,CAAC,gBAAgBR,IAAhB,GAAuB,SAAxB,CAAL;AACH,OAHD,MAIK;AACDQ,QAAAA,KAAK,CAAC,gBAAgBR,IAAhB,GAAuB,KAAxB,CAAL;AACH;AACJ;;AAED,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,oBAAD;AACI,MAAA,MAAM,EAAE;AACJS,QAAAA,GAAG,EAAEtC,OADD;AAEJuC,QAAAA,SAAS,EAAE;AAFP,OADZ;AAKI,MAAA,MAAM,EAAEC,UAAU,IACdA,UAAU,IACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,wBAAD;AACI,QAAA,qBAAqB,EAAE;AAAEC,UAAAA,KAAK,EAAErC;AAAT,SAD3B;AAEI,QAAA,UAAU,EAAEoC,UAFhB;AAGI,QAAA,eAAe,EAAE,KAAKxB,mBAAL,CAAyB0B,IAAzB,CAA8B,IAA9B,CAHrB;AAII,QAAA,aAAa,EAAE,0BAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAErC,KAFX;AAGI,QAAA,WAAW,EAAC,uBAHhB;AAII,QAAA,QAAQ,EAAE,KAAKM,iBAAL,CAAuB+B,IAAvB,CAA4B,IAA5B,CAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CADJ,CADJ,EAgBI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,wBAAD;AACI,QAAA,qBAAqB,EAAE;AAAED,UAAAA,KAAK,EAAElC;AAAT,SAD3B;AAEI,QAAA,UAAU,EAAEiC,UAFhB;AAGI,QAAA,eAAe,EAAE,KAAKb,qBAAL,CAA2Be,IAA3B,CAAgC,IAAhC,CAHrB;AAII,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAJX;AAKI,QAAA,aAAa,EAAE,0BALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAErC,OAFX;AAGI,QAAA,WAAW,EAAC,sBAHhB;AAII,QAAA,QAAQ,EAAE,KAAKS,mBAAL,CAAyB2B,IAAzB,CAA8B,IAA9B,CAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,CAFJ,CAhBJ,CAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ;AAmDH;;AAnHuC;;AAsH5CzC,aAAa,CAAC2C,SAAd,GAA0B;AACtBJ,EAAAA,UAAU,EAAE7C,SAAS,CAACkD;AADA,CAA1B;AAIA,eAAe5C,aAAf","sourcesContent":["import PropTypes from \"prop-types\"\nimport React from \"react\"\nimport ReactGoogleMapLoader from \"react-google-maps-loader\"\nimport ReactGooglePlacesSuggest from \"react-google-places-suggest\"\nimport geodist from 'geodist'\n\nconst API_KEY = \"AIzaSyAQU3x2PDxhLZEYFk4Af4HBPYDpy40aHEs\"\nclass GoogleSuggest extends React.Component {\n    state = {\n        search: \"\",\n        value: \"\",\n        value_2: \"\",\n        search_2: \"\",\n        first_adresse: {},\n        last_adresse: {},\n        result: false,\n\n    }\n\n\n    handleInputChange(e) {\n        this.setState({ search: e.target.value, value: e.target.value, result: false })\n    }\n    handleInputChange_1(e) {\n        this.setState({ search_2: e.target.value, value_2: e.target.value, result: false })\n    }\n\n    handleSelectSuggest(suggest) {\n        // console.log(suggest.formatted_address)\n        // console.log(suggest.geometry.viewport.ia.j)\n        var first_adresse = {\n            name: suggest.formatted_address,\n            lat: suggest.geometry.viewport.na.j,\n            lon: suggest.geometry.viewport.ia.j,\n        }\n\n        this.setState({ search: \"\", value: suggest.formatted_address, first_adresse: first_adresse, result: false })\n    }\n    handleSelectSuggest_2(suggest) {\n        // console.log(suggest)\n        var last_adresse = {\n            name: suggest.formatted_address,\n            lat: suggest.geometry.viewport.na.j,\n            lon: suggest.geometry.viewport.ia.j,\n        }\n        this.setState({ search_2: \"\", value_2: suggest.formatted_address, last_adresse: last_adresse, result: true })\n    }\n\n    render() {\n        const { search, value, value_2, search_2 } = this.state\n\n        // console.log(this.state.first_adresse.name);\n        // console.log(this.state.last_adresse);\n        if (this.state.result !== false) {\n            var test = geodist(this.state.first_adresse, this.state.last_adresse, { exact: true, unit: 'meters' })     // => 402.09212137829695\n\n            test = Math.round(test);\n            test = test / 1000\n            // alert(test/ 1000)\n            test = test.toString();\n\n            // console.log(test.substr(0, 1));\n            if (test.substr(0, 1) === '0') {\n                test = test.slice(2);\n                alert(\"Distance : \" + test + \" metres\")\n            }\n            else {\n                alert(\"Distance : \" + test + \" km\")\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <ReactGoogleMapLoader\n                        params={{\n                            key: API_KEY,\n                            libraries: \"places,geocode\",\n                        }}\n                        render={googleMaps =>\n                            googleMaps && (\n                                <div>\n                                    <div className=\"col-6\">\n                                        <ReactGooglePlacesSuggest\n                                            autocompletionRequest={{ input: search }}\n                                            googleMaps={googleMaps}\n                                            onSelectSuggest={this.handleSelectSuggest.bind(this)}\n                                            textNoResults={\"Aucune adresse trouvée..\"}\n                                        >\n                                            <input\n                                                type=\"text\"\n                                                value={value}\n                                                placeholder=\"Addresse de départ\"\n                                                onChange={this.handleInputChange.bind(this)}\n                                            />\n                                        </ReactGooglePlacesSuggest>\n                                    </div>\n                                    <div className=\"col-6\">\n\n                                        <ReactGooglePlacesSuggest\n                                            autocompletionRequest={{ input: search_2 }}\n                                            googleMaps={googleMaps}\n                                            onSelectSuggest={this.handleSelectSuggest_2.bind(this)}\n                                            style={{ height: '500%' }}\n                                            textNoResults={\"Aucune adresse trouvée..\"}\n\n                                        >\n                                            <input\n                                                type=\"text\"\n                                                value={value_2}\n                                                placeholder=\"Adresse d'arrivée\"\n                                                onChange={this.handleInputChange_1.bind(this)}\n                                            />\n                                        </ReactGooglePlacesSuggest>\n                                    </div>\n                                </div>\n                            )\n                        }\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nGoogleSuggest.propTypes = {\n    googleMaps: PropTypes.object,\n}\n\nexport default GoogleSuggest"]},"metadata":{},"sourceType":"module"}