{"ast":null,"code":"var _jsxFileName = \"/var/www/html/devis_sayse/src/views/NotFound.js\";\nimport React, { Component } from 'react';\nimport FinalForm from './test_input';\nimport Client from '../components/Devis/inputClient';\nimport { Form, Icon, Button, Input } from 'antd';\nlet id = 0;\n\nclass NotFound extends Component {\n  constructor() {\n    super();\n\n    this.add = () => {\n      const form = this.props.form; // can use data-binding to get\n\n      const keys = form.getFieldValue('keys');\n      const nextKeys = keys.concat(id++); // can use data-binding to set\n      // important! notify form to detect changes\n\n      form.setFieldsValue({\n        keys: nextKeys\n      });\n    };\n\n    this.getDataForPdf = e => {\n      this.setState({\n        res: [...this.state.res, e]\n      });\n    };\n\n    this.state = {\n      res: [],\n      client: []\n    };\n  }\n\n  componentDidMount() {}\n\n  getData(e) {\n    this.setState({\n      client: [...this.state.client, e]\n    });\n  }\n\n  handleSubmit(event) {\n    console.log(this.state.res);\n    console.log(this.state.client);\n    event.preventDefault();\n  }\n\n  render() {\n    const _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldValue = _this$props$form.getFieldValue;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 4\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 20\n        }\n      }\n    };\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 20,\n          offset: 4\n        }\n      }\n    };\n    getFieldDecorator('keys', {\n      initialValue: []\n    });\n    const keys = getFieldValue('keys');\n    const formItems = keys.map((k, index) => React.createElement(\"div\", {\n      key: k,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      className: \"row\",\n      style: {\n        marginTop: '1%'\n      } // {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n      // label={index === 0 ? '' : ''}\n      ,\n      required: false,\n      key: k,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, getFieldDecorator(\"names[\".concat(k, \"]\"), {\n      validateTrigger: ['onChange', 'onBlur'],\n      rules: [{\n        required: true,\n        whitespace: true,\n        message: \"Veuillez remplir tout les champs\"\n      }]\n    })(React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Input, {\n      className: \"form-control\",\n      type: \"text\",\n      value: nameSite,\n      placeholder: \"Nom du site\",\n      onChange: this.NameSiteChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), \"                                \"), React.createElement(\"div\", {\n      className: \"col-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(FinalForm, {\n      getDataForPdf: this.getDataForPdf.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })))), keys.length > 1 ? React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }) : null)));\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Client, {\n      getData: this.getData.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, formItems), React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"dashed\",\n      className: \"btn_add\",\n      onClick: this.add,\n      style: {\n        width: '20%',\n        marginBottom: '2vh',\n        marginTop: '2vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Ajouter un nouveau site\"))), React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"btn btn-test\",\n      type: \"submit\",\n      value: \"Convertir en PDF\",\n      style: {\n        marginTop: '5%',\n        marginBottom: '5%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst WrappedDynamicFieldSet = Form.create({\n  name: 'dynamic_form_item'\n})(NotFound);\nexport default WrappedDynamicFieldSet;","map":{"version":3,"sources":["/var/www/html/devis_sayse/src/views/NotFound.js"],"names":["React","Component","FinalForm","Client","Form","Icon","Button","Input","id","NotFound","constructor","add","form","props","keys","getFieldValue","nextKeys","concat","setFieldsValue","getDataForPdf","e","setState","res","state","client","componentDidMount","getData","handleSubmit","event","console","log","preventDefault","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","initialValue","formItems","map","k","index","marginTop","validateTrigger","rules","required","whitespace","message","nameSite","NameSiteChange","bind","length","width","marginBottom","WrappedDynamicFieldSet","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FinalForm from './test_input';\nimport Client from '../components/Devis/inputClient';\nimport { Form, Icon, Button, Input } from 'antd';\n\nlet id = 0;\n\nclass NotFound extends Component {\n    constructor() {\n        super();\n        this.state = {\n            res: [],\n            client: [],\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    add = () => {\n        const { form } = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(id++);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    };\n\n\n    getData(e) {\n        this.setState({ client: [... this.state.client, e] })\n    }\n\n    handleSubmit(event) {\n        console.log(this.state.res);\n        console.log(this.state.client);\n\n        event.preventDefault();\n    }\n\n    getDataForPdf = (e) => {\n        this.setState({ res: [... this.state.res, e] })\n    }\n\n    render() {\n        const { getFieldDecorator, getFieldValue } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 4 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 20 },\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            wrapperCol: {\n                xs: { span: 24, offset: 0 },\n                sm: { span: 20, offset: 4 },\n            },\n        };\n\n\n        getFieldDecorator('keys', { initialValue: [] });\n        const keys = getFieldValue('keys');\n        const formItems = keys.map((k, index) => (\n            <div key={k}>\n                <Form.Item className=\"row\" style={{ marginTop: '1%' }}\n                    // {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    // label={index === 0 ? '' : ''}\n                    required={false}\n                    key={k}\n                >\n                    {getFieldDecorator(`names[${k}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [\n                            {\n                                required: true,\n                                whitespace: true,\n                                message: \"Veuillez remplir tout les champs\",\n                            },\n                        ],\n                    })\n                        (\n                        <div>\n                            <hr></hr>\n                            <div className=\"row\">\n                                <div className=\"col-4\"></div>\n\n                                <div className=\"col-4\">\n                                    <Input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        value={nameSite}\n                                        placeholder=\"Nom du site\"\n                                        onChange={this.NameSiteChange.bind(this)}\n                                    />                                </div>\n                                <div className=\"col-4\"></div>\n\n                                <FinalForm getDataForPdf={this.getDataForPdf.bind(this)} />\n                            </div>\n                        </div>\n                        )}\n                    {keys.length > 1 ? (\n                        <div className=\"text-center\">\n                            {/* <p className=\"p delete\">Supprimer le service n° {k + 1} &nbsp;\n                  <Icon\n                      className=\"dynamic-delete-button\"\n                      type=\"minus-circle-o\"\n                      onClick={() => this.remove(k)}\n                    />\n                  </p> */}\n                        </div>\n                    ) : null}\n                </Form.Item>\n            </div>\n\n        ));\n\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                    <Client getData={this.getData.bind(this)} />\n                    {/* <FinalForm getDataForPdf={this.getDataForPdf.bind(this)} /> */}\n\n                    <div className=\"\">\n                        <div className=\"\">\n                            {formItems}\n                            {/* <button onClick={this.getKey.bind(this)}>getKey</button> */}\n                        </div>\n                        <div className=\"text-center\">\n                            <Button type=\"dashed\" className=\"btn_add\" onClick={this.add} style={{ width: '20%', marginBottom: '2vh', marginTop: '2vh' }}>\n                                {/* <Icon type=\"plus\" /> */}\n                                Ajouter un nouveau site\n                        </Button>\n                        </div>\n                    </div>\n                    <div className=\"text-center\">\n                        <input className=\"btn btn-test\" type=\"submit\" value=\"Convertir en PDF\" style={{ marginTop: '5%', marginBottom: '5%' }} />\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\nconst WrappedDynamicFieldSet = Form.create({ name: 'dynamic_form_item' })(NotFound);\nexport default WrappedDynamicFieldSet;"]},"metadata":{},"sourceType":"module"}